mpg %>% filter(displ<=4) %>% select(hwy)))
mpg %>% group_by(displ<=4,displ>=5)
mpg %>% filter(displ<=4)
mpg %>% filter(displ<=4) -> lowerthanfour
mpg %>% filter(displ>=5) -> biggerthanfive
mpg %>% group_by(displ<=4,displ>=5)
mpg %>% filter(displ<=4) %>% summarise(mean(hwy)) -> lowerthanfour
mpg %>% filter(displ<=4) %>% summarise(mean(hwy)) -> lowerthanfour
mpg %>% filter(displ>=5) %>% summarise(mean(hwy)) -> biggerthanfive
lowerthanfour
biggerthanfive
mpg %>% group_by(displ<=4,displ>=5) %>% mutate(가성비 =(ifelse(displ<=4,lowerthanfour,biggerthanfive)))
mpg %>% group_by(displ<=4,displ>=5) %>% mutate(가성비 =(ifelse(displ<=4,lowerthanfour,biggerthanfive))) ->gg
View(gg)
View(gg)
# 가로로 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5, 6),
midterm = c(60, 80, 70, 90, 85, 100))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 5, 3, 4, 2, 7),
final = c(70, 80, 65, 95, 83, 0))
# id 기준으로 합치기
total <- full_join(test1, test2, by = "id")  # id 기준으로 합쳐 total에 할당
# id 기준으로 합치기
total <- full_join(test1, test2, by = "id")  # id 기준으로 합쳐 total에 할당
# 다른 데이터 활용해 변수 추가하기
# 반별 담임교사 명단 생성
name <- data.frame(class = c(1, 2, 3, 4, 5), teacher = c("kim", "lee", "park", "choi", "jung"))
# class 기준 합치기
exam_new <- left_join(exam, name, by = "class")
#righ_join -> 6제외
#left_join -> 7제외
#full_join -> 6,7 포함.
# 세로로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80))
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
# class 기준 합치기
exam_new <- left_join(exam, name, by = "class")
exam_new
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
# 결측치 있는 행 제거하기
library(dplyr) # dplyr 패키지 로드
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
df %>% filter(is.na(score))   # score가 NA인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
# 여러 변수 동시에 결측치 없는 데이터 추출하기
# score, sex 결측치 제외
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
# 결측치가 하나라도 있으면 제거하기
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
df_nomiss2
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 결측치 생성
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
# 결측치 생성
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
library(dplyr)
# 결측치 생성
exam <- read.csv("csv_exam.csv")           # 데이터 불러오기
# 결측치 생성
exam <- read.csv("csv_exam.csv")           # 데이터 불러오기
table(is.na(exam))
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15행의 math에 NA 할당
#평균 구하기
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 결측치 생성
exam <- read.csv("csv_exam.csv")           # 데이터 불러오기
# 결측치 생성
exam <- read.csv("data/csv_exam.csv")           # 데이터 불러오기
table(is.na(exam))
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15행의 math에 NA 할당
#평균 구하기
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 다른 함수들에 적용
exam %>% summarise(mean_math = mean(math, na.rm = T),      # 평균 산출
sum_math = sum(math, na.rm = T),        # 합계 산출
median_math = median(math, na.rm = T))  # 중앙값 산출
# 평균으로 대체하기
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math가 NA면 55로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
mean(exam$math)  # math 평균 산출
# 결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# 결측 처리하기 - sex
# sex가 3이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
#결측 처리하기 - score
# sex가 1~5 아니면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
# 결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
mpg <- as.data.frame(ggplot2::mpg)
mpg
ggplot2::mpg
View(mpg)
# 234행에 11열
boxplot(mpg$hwy)
# 234행에 11열
boxplot(mpg$hwy) # 어느정도 범위 값이 아닌 너무 큰 값이나 너무 작은 값 있으면
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=2)
# 234행에 11열
boxplot(mpg$hwy) # 어느정도 범위 값이 아닌 너무 큰 값이나 너무 작은 값 있으면
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=2) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=1) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=50) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=1.3) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=1.5) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=1) # 범위를 들려서 정상범위라고 알려줄 수 있음.
# 박스 플롯이 제일 효과적...
boxplot(mpg$hwy, range=2) # 범위를 들려서 정상범위라고 알려줄 수 있음.
summary(mpg$hwy)
# 결측 처리하기
# 12~37 벗어나면 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
mpg <- as.data.frame(ggplot2::mpg)
mpg2 = mpg
mpg2 %>% mutate(sumy = cwy+hwy )
mpg2 %>% mutate(sumy = cty+hwy )
# 문제 7-1
# 문제 7-1
# 문제 7-1
# 문제 7-1
# 문제 7-1
# 문제 7-1# 문제 7-1
mpg2
# 문제 7-1
mpg2 %>% mutate(sumy = cty+hwy) -> mpg2
mpg2
# 문제 7-2
mpg2 %>% mutate(sumy/2)
mpg <- as.data.frame(ggplot2::mpg)
mpg2 = mpg
# 문제 7-1
mpg2 %>% mutate(합산연비 = cty+hwy) -> mpg2
# 문제 7-2
mpg2 %>% mutate(평균연비= 합산연비/2)
mpg2
mpg <- as.data.frame(ggplot2::mpg)
mpg2 = mpg
# 문제 7-1
mpg2 %>% mutate(합산연비 = cty+hwy) -> mpg2
mpg2
# 문제 7-2
mpg2 %>% mutate(평균연비= 합산연비/2) ->mpg2
mpg2
# 문제 7-3
mpg2 %>% arrange(desc(평균연비))
# 문제 7-3
mpg2 %>% arrange(desc(평균연비)) %>% head(3)
# 문제 7-4
mpg %>% select(cty,hwy)
mpg %>%
filter(class == "suv") %>%
mutate(tot = (cty+hwy)/2) %>%
group_by(manufacturer) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%          # 내림차순 정렬
head(5)
# 문제 7-3
mpg2 %>% arrange(desc(평균연비)) %>% head(3)
# 문제 7-4
mpg %>% mutate(합산연비 = cty+hwy) %>% mutate(평균연비 = 합산연비/2) %>% arrange(desc(평균연비)) %>% head(3)
# 문제 8-1
# 문제 8-1
# 문제 8-1
# 문제 8-1
# 문제 8-1
# 문제 8-1
# 문제 8-1
mpg %>% group_by(class)
# 문제 8-1
mpg %>% group_by(class) %>% summarise(mean(cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(mean(cty)))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc)
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc())
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc())
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty))
# 문제 8-2
mpg %>% group_by(class) %>% arrange(desc(summarise(mean(cty))))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(arrange(desc(mean(cty))))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% mean()
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty))
# 문제 8-2
mpg %>% group_by(class) %>% arrange(summarise(mean(cty)))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(desc(cty)))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(arrange(cty)))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(class))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(mean(cty)))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(mpg$cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(summarise(mean(cty))))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(summarise(mean(mpg$cty))))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(class))
mpg$cty
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) %>% arrange(desc(mpg$cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(mean(cty)) -> mm
mm %>% arrange(desc(cty))
mm %>% arrange(desc(mm&cty))
mm %>% arrange(desc(mm$cty))
mm
# 문제 8-2
mpg %>% group_by(class) %>% summarise(평균연비 = mean(cty))
# 문제 8-2
mpg %>% group_by(class) %>% summarise(평균연비 = mean(cty)) %>% arrange(desc(평균연비))
# 문제 8-3
mpg %>% group_by(manufacturer)
# 문제 8-3
mpg %>% group_by(manufacturer) %>% summarise(고속도로평균 = mean(hwy))
# 문제 8-3
mpg %>% group_by(manufacturer) %>% summarise(고속도로평균 = mean(hwy)) %>% head(3)
mpg %>% group_by(manufacturer) %>% summarise(고속도로평균 = mean(hwy))
# 문제 8-3
mpg %>% group_by(manufacturer) %>% summarise(고속도로평균 = mean(hwy)) %>% head(3)
# 문제 8-3
mpg %>% group_by(manufacturer) %>% summarise(고속도로평균 = mean(hwy)) %>% arrange(desc(고속도로평균)) %>% head(3)
# 문제 8-4
mpg %>% group_by(manufacturer) %>% filter(class="compact") %>% summarise(sum())
# 문제 8-4
mpg %>% group_by(manufacturer) %>% filter(class=="compact") %>% summarise(sum())
# 문제 8-4
mpg %>% group_by(manufacturer) %>% filter(class=="compact") %>% summarise(개수=n())
# 문제 8-4
mpg %>% group_by(manufacturer) %>% filter(class=="compact") %>% summarise(개수=n()) %>% arrange(desc(개수))
# 문제 9-1
fuel = data.frame(fl = c("c", "d", "e", "p", "r"), 가격(갤런당USD) = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)
# 문제 9-1
fuel = data.frame(fl = c("c", "d", "e", "p", "r"), frice_fl = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)
fuel
# 문제 9-1
mpg <- as.data.frame(ggplot2::mpg)
fuel = data.frame(fl = c("c", "d", "e", "p", "r"), frice_fl = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)
mpg = left_join(mpg,fuel, by="fl")
mpg
# 문제 9-2
mpg %>% select(model,fl,price_fl) %>% head(5)
mpg
# 문제 9-1
mpg = as.data.frame(ggplot2::mpg)
fuel = data.frame(fl = c("c", "d", "e", "p", "r"), price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)
mpg = left_join(mpg,fuel, by="fl")
# 문제 9-2
mpg %>% select(model,fl,price_fl) %>% head(5)
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest
#righ_join -> 6제외
#left_join -> 7제외
#full_join -> 6,7 포함.
# 세로로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80))
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all
midwest
midwest %>% mutate(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf = popadults/poptotal*100)
# 문제 10-2
midwest %>% arrange(desc(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf))
# 문제 10-2
midwest %>% arrange(desc(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf))
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf = popadults/poptotal*100) -> midwest
# 문제 10-2
midwest %>% arrange(desc(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf))
# 문제 10-2
midwest %>% arrange(desc(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf)) %>% head(5)
# 문제 9-1
mpg = as.data.frame(ggplot2::mpg)
mpg = left_join(mpg,fuel, by="fl")
# 문제 9-1
mpg = as.data.frame(ggplot2::mpg)
mpg
midwest
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf>=40,"large",
ifelse(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf>=30,"middle","small")))
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf = popadults/poptotal*100) -> midwest
# 문제 10-2
midwest %>% arrange(desc(전체인구대비미성년인구)) %>% head(5)
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(전체인구대비미성년인구>=40,"large",
ifelse(전체인구대비미성년인구>=30,"middle","small")))
# 문제 10-2
midwest %>% arrange(desc(전체인구대비미성년인구)) %>% head(5)
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(wjscpdlsrneoqlaltjdsusdlsrnqorqnsdbf = popadults/poptotal*100) -> midwest
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(미성년인구백분율 = popadults/poptotal*100) -> midwest
# 문제 10-2
midwest %>% arrange(desc(미성년인구백분율)) %>% head(5)
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(미성년인구백분율>=40,"large",
ifelse(미성년인구백분율>=30,"middle","small")))
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(midwest$미성년인구백분율>=40,"large",
ifelse(midwest$미성년인구백분율>=30,"middle","small")))
분류
midwest = left_join(midwest,분류, by="미성년인구백분율")
midwest = left_join(midwest,분류, by=미성년인구백분율)
midwest = left_join(midwest,분류, by="미성년인구백분율")
midwest = right_join(midwest,분류, by="미성년인구백분율")
midwest = full_join(midwest,분류, by="미성년인구백분율")
분류
midwest
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest
분류 = data.frame(미성년비율등급 = ifelse(midwest$미성년인구백분율>=40,"large",
ifelse(midwest$미성년인구백분율>=30,"middle","small")))
분류
분류
분류
분류
분류
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(미성년인구백분율 = popadults/poptotal*100) -> midwest
# 문제 10-2
midwest %>% arrange(desc(미성년인구백분율)) %>% head(5)
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(midwest$미성년인구백분율>=40,"large",
ifelse(midwest$미성년인구백분율>=30,"middle","small")))
midwest = left_join(midwest,분류, by="미성년인구백분율")
# 문제 10-1
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(미성년인구백분율 = popadults/poptotal*100) -> midwest
# 문제 10-2
midwest %>% arrange(desc(미성년인구백분율)) %>% head(5)
midwest = as.data.frame(ggplot2::midwest)
midwest %>% mutate(미성년인구백분율 = popadults/poptotal*100) -> midwest
# 문제 10-3
분류 = data.frame(미성년비율등급 = ifelse(midwest$미성년인구백분율>=40,"large",
ifelse(midwest$미성년인구백분율>=30,"middle","small")))
분류
install.packages(c("htmlwidgets", "wordcloud", "wordcloud2"))
install.packages("KoNLP")
install.packages("KoNLP")
# 패키지 설치가 잘 됩니까요?ㅜㅜ
# 2020.04.16 현재 안됩니다요...ㅜㅜ
# 강사컴의 KoNLP.zip을 복사해서 사용합니다.
# KoNLP.zip의 압축을 해제하고 생성된 KoNLP폴더를
# C:\Users\student\Documents\R\win-library\3.6 에
# 복사합니다.
# 그리고 나서 다음에 제시된 패키지들을 하나하나
# 설치합니다.
install.packages("Sejong")
install.packages("hash")
install.packages("rJava")
install.packages("tau")
install.packages("RSQLite")
install.packages("devtools")
# KoNLP 로드
library(KoNLP)
useSejongDic()
install.packages("Rcpp")
install.packages("Rcpp")
# KoNLP 로드
library(KoNLP)
useSejongDic()
word_data <- readLines("book/애국가(가사).txt")
word_data
word_data2 <- sapply(word_data, extractNoun, USE.NAMES = F)
word_data2
word_data2
word_data3 <- extractNoun(word_data)
word_data3
add_words <- c("백두산", "남산", "철갑", "가을", "달")
buildDictionary(user_dic=data.frame(add_words, rep("ncn", length(add_words))), replace_usr_dic=T)
undata <- unlist(word_data3)
undata
word_table
word_table <- table(undata)
word_table
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table2 <- table(undata2)
word_table2
final <- sort(word_table2, decreasing = T)
head(final, 10)
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
SimplePos22("대한민국의 영토는 한반도와 그 부속도서로 한다")
SimplePos09("대한민국의 영토는 한반도와 그 부속도서로 한다")
hotel_data <- readLines("hotel.txt")
hotel_data
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
hotel_data
unlist(hotel_data)
hotel_data = table(hotel_data)
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- sort(hotel_data, decreasing = T)
head(hotel_data, 10)
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table2 <- table(undata2)
word_table2
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- Filter(function(x) {nchar(x) >= 2}, hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- sort(hotel_data, decreasing = T)
head(hotel_data, 10)
hotel_data <- readLines("hotel.txt")
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- Filter(function(x) {nchar(x) >= 2}, hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- readLines("hotel.txt")
hotel_data <- extractNoun(hotel_data)
hotel_data <- unlist(hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- Filter(function(x) {nchar(x) >= 2}, hotel_data)
hotel_data <- table(hotel_data)
hotel_data <- sort(hotel_data, decreasing = T)
head(hotel_data, 10)
hotel_data
hotel_data
hotel_data
hotel_data <- readLines("hotel.txt")
hotel_data <- readLines("hotel.txt")
hotel_data
hotel_data <- extractNoun(hotel_data)
hotel_data <- extractNoun(hotel_data)
